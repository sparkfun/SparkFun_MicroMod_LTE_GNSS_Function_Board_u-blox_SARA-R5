{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"arduino_examples/","title":"Arduino Examples","text":"<p>The SparkFun u-blox SARA-R5 Arduino Library includes several examples to cover how to configure and use different features of the SARA-R5 module.</p> <p>Make sure to go through the following examples to get the SARA-R5 registered and configured properly on your mobile network:</p> <ul> <li>Example 3 - Network Info</li> <li>Example 4 - Register Operator</li> <li>Example 7 - Configure Packet Switched Data</li> </ul>"},{"location":"arduino_examples/#example-1-gnss-gprmc","title":"Example 1 - GNSS GPRMC","text":"<p>The first example enables the GNSS receiver and reads the GPRMC message for position, speed and time data. Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example1_GNSS_GPRMC.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200. The code waits for a keyboard input from the user before progressing and running the setup and loop. After user input, the code prints out GPS data every second when there is a GPS lock.</p> <p>Note</p> <p>Heads up! Make sure your GNSS antenna has a clear view of the open sky. Placing the antenna outdoors away from large objects (buildings, large trees, etc.) is best but if necessary you can usually place the antenna in a window that has a view of the sky to get a lock.</p>"},{"location":"arduino_examples/#code-to-note","title":"Code to Note","text":"<p>This function organizes the GPS data to print out neatly whenever the data returns as valid:</p> <pre><code>void printGPS(void)\n{\n  Serial.println();\n  Serial.println(\"UTC: \" + String(gps.utc));\n  Serial.print(\"Time: \");\n  if (clk.time.hour &lt; 10) Serial.print('0'); // Print leading 0\n  Serial.print(String(clk.time.hour) + \":\");\n  if (clk.time.minute &lt; 10) Serial.print('0'); // Print leading 0\n  Serial.print(String(clk.time.minute) + \":\");\n  if (clk.time.second &lt; 10) Serial.print('0'); // Print leading 0\n  Serial.print(String(clk.time.second) + \".\");\n  if (clk.time.ms &lt; 10) Serial.print('0'); // Print leading 0\n  Serial.println(String(clk.time.ms));\n  Serial.println(\"Latitude: \" + String(gps.lat, 7));\n  Serial.println(\"Longitude: \" + String(gps.lon, 7));\n  Serial.println(\"Speed: \" + String(spd.speed, 4) + \" @ \" + String(spd.cog, 4));\n  Serial.println(\"Date (MM/DD/YY): \" + String(clk.date.month) + \"/\" +\n    String(clk.date.day) + \"/\" + String(clk.date.year));\n  Serial.println(\"Magnetic variation: \" + String(spd.magVar));\n  Serial.println(\"Status: \" + String(gps.status));\n  Serial.println(\"Mode: \" + String(gps.mode));\n  Serial.println();\n}\n</code></pre>"},{"location":"arduino_examples/#example-2-identification","title":"Example 2 - Identification","text":"<p>The second example prompts the LTE module to read the SARA-R5's identification information:</p> <ul> <li>Manufacturer ID</li> <li>Model</li> <li>Firmware Version</li> <li>Serial Number</li> <li>IMEI ID</li> <li>IMSI ID</li> <li>SIM CCID</li> <li>Subscriber Number (from the SIM)</li> <li>Capabilities</li> <li>SIM state</li> </ul> <p>This example primarily functions as a check to make sure the SARA-R5 is working properly and the SIM card is detected then polls the SIM status in the main loop. Upload the code and open a terminal window with the baud set to 115200. The code initializes the SARA-R5 and after a user input, initializes the SARA-R5 and prints out the ID information and SIM state.</p> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example2_Identification.</p> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Again, the code waits for a keyboard input from the user before progressing and running the setup and loop.</p> <p>Make sure to wait for the blue NI LED to light up first before sending a character through the terminal window. Once there is a network in range, send a character to run the example. You will see the SARA-R5's identification information printed out.</p>"},{"location":"arduino_examples/#example-3-network-info","title":"Example 3 - Network Info","text":"<p>This example verifies the SARA-R5 is receiving an LTE signal on a selected network and prints out the network information and IDs. The code creates the SARA-R5 object and assigns a network operator value. Depending on the network for your SIM card uses, adjust this line:</p> <pre><code>const mobile_network_operator_t MOBILE_NETWORK_OPERATOR = MNO_GLOBAL;\n</code></pre> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example3_NetworkInfo.</p> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Wait for the blue NI LED to light up and then send a keyboard input.</p> <p>After initializing everything needed, the code attempts to set the Network Profile to the Mobile Network Operator entered. If successful, the code prints out the RSSI (Received Signal Strength), Network Registration Status and Context IDs, Access Point Names and IP Addresses.</p> <p>Depending on the output in the Serial Monitor, you may need to scroll down to view the Context ID, APN, and IP Address.</p>"},{"location":"arduino_examples/#example-4-register-operator","title":"Example 4 - Register Operator","text":"<p>Example 4 checks to see if the SARA-R5 is connected to a network and lets you register on a different network if available and if the SIM supports this. This example can also be used to list all the LTE operators the SARA-R5 can detect.</p> <p>Note</p> <p>You can only connect to networks supported by your SIM card. Refer to your SIM card manufacturer's documentation for supported networks.</p> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example4_RegisterOperator.</p> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Wait for the blue NI LED to light up and then send a keyboard input.</p>"},{"location":"arduino_examples/#example-7-configure-packed-switched-data","title":"Example 7 - Configure Packed Switched Data","text":"<p>Example 7 configures the \"Context Identifier\" for the mobile data connection. Make sure to go through this example to properly set up your SARA-R5 Context ID.</p> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example7_ConfigurePacketSwitchedData.</p> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Wait for the blue NI LED to light up and then send a keyboard input. Then follow the prompts to select the appropriate Context ID. You may see a few Context IDs so make sure to select one that looks correct (i.e. not a blank IP):</p> <p>The code provides a warning that \u201cdeactivate profile failed\u201d. We see this because the SARA needs to disconnect from a profile before it can connect to a new one, and in this case this failed because there was no profile active. Don't worry about this warning, it is just there for information. The example shows that our connection was successful by displaying the Internet Protocol (IP) address the SARA has been allocated by the service operator.</p>"},{"location":"arduino_examples/#example-5-receive-sms","title":"Example 5 - Receive SMS","text":"<p>The fifth example demonstrates how to read and print any SMS text messages the SARA-R5 receives. The code checks whether the module is connected to an operator and will freeze if unsuccessful. If the code freezes here, wait and retry as it may be a connection issue with your network. Otherwise, return to Examples 3 and 4 to set up the Network Operator.</p> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example5_ReceiveSMS.</p> <p>The main loop accesses the message storage memory used for reading and deleting messages for data and prints the used and total number of memory locations in the message storage.</p> <p>The code waits for any new messages to arrive and prints the Message Index (location), Status, Originator, Date and Time and then the message contents.</p> <p>New messages are automatically marked as read once the code prints them. To force the code to print all the messages stored in the message memory, comment out this line:</p> <pre><code>if (unread == \"REC UNREAD\")\n</code></pre> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Wait for the blue NI LED to light up and then send a keyboard input.</p> <p>Assuming that you registered and activated your Hologram SIM card, log into your Hologram account. Head to the Devices and select the SIM card. Then select the Messaging tab and write message. Hit Send SMS message button.</p> <p>If all goes well, you will notice that the message was sent successfully!</p> <p>Head back to you Arduino Serial Monitor to view the message. You should see the message that was originally written in the Serial Monitor. Sweet!</p> <p>Before moving onto the next example, make sure to keep track of the \"Originator\". This is the number that is associated with the SIM card and your Hologram account.</p>"},{"location":"arduino_examples/#example-6-send-sms","title":"Example 6 - Send SMS","text":"<p>Note</p> <p>Depending on your network, you may have issues sending a SMS message to a smartphone. Even if you have the correct phone number entered and you receive a response that the message was sent successfully to your network, the service carrier may block the message from being sent to your smartphone. For more information, check out the article about Troubleshooting Undelivered SMS Messages Sent To or From a Hologram Device.</p> <p>The sixth example sends SMS messages to another phone or LTE module from the SparkFun LTE GNSS Function Board - SARA-R5. The code prompts the user for the destination number and message contents.</p> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example6_SendSMS.</p> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Wait for the blue NI LED to light up and then send a keyboard input. Enter the message that you want to send and the destination number.</p> <p>Assuming that you are using a Hologram SIM card, head back to your Hologram account. Expand the window where it says \"All activity\". You should see the original message that was sent from the SARA-R5!</p>"},{"location":"arduino_library/","title":"Installing the Arduino Library","text":"<p>Note</p> <p>The SparkFun u-blox SARA-R5 Arduino Library provides a quick way to interact with the interfaces on the MicroMod LTE GNSS Function Board. Install the library through the Arduino Library Manager tool by searching for \"SparkFun u-blox SARA-R5\". Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun SARA-R5 Arduino Library (ZIP) <p>The library primarily works by associating a selection of AT Commands from the Command Set Manual with standard Arduino functions to run automatically in a sketch. View the full list of AT Commands included in this library (along with all other available functions) in the header file. The list of included AT Commands starts on line 93.</p> <p>Note</p> <p>When using the MicroMod ESP32 Processor Board with the  SparkFun_u-blox_SARA-R5_Arduino_Library make sure to include the following line of code in the <code>setup()</code> function to enable the voltage regulator:</p> <p><pre><code>\u00a0\u00a0\u00a0\u00a0pinMode(PWM1, INPUT_PULLUP); // EN on F0 when using the ESP32 Processor Board</code></pre></p>"},{"location":"arduino_library/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and an library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"arduino_library/#board-definitions","title":"Board Definitions","text":"<p>For the scope of this tutorial, we will be using the MicroMod ESP32 Processor Board. If you have not installed a board definition before, please review the following tutorial as well.</p> <ul> <li>Installing Board Definitions in the Arduino IDE</li> </ul>"},{"location":"arduino_library/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>The MicroMod ESP32 Processor Board also uses the CP2104 USB-to-Serial converter (other compatible Processor Boards may require a different driver). Users will need to install the SiLabs CP2104 Driver, which can be found here: USB to UART Bridge VCP Driver. Make sure to manually install the driver for the CP2104 with the following instructions. The driver that Windows auto-installs will not work with the auto-reset circuit on the board and cause serial uploads to fail.</p> <ul> <li>Windows VCP Driver (ZIP)</li> <li>MAC OSX VCP Driver (ZIP)</li> </ul> <p>If applicable, make sure you are using the proper driver files for your CPU architecture. This is usually indicated by a folder or file name with \"x86\" for 32-bit processors or \"x64\" for 64-bit processors.</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>If you have not already, make sure to check out the Getting Started with MicroMod: Hardware Hookup for information on inserting your Processor and Function Boards to the Main Board.</p> Getting Started with MicroMod: Hardware Hookup"},{"location":"hardware_hookup/#inserting-a-sim-card","title":"Inserting a SIM Card","text":"<p>Note</p> <p>Insert the SIM card into the nano SIM socket until it clicks. In this case, we used a Hologram card.</p>"},{"location":"hardware_hookup/#activate-your-hologram-sim","title":"Activate Your Hologram SIM","text":"<p>If you're using a SIM card from Hologram, you'll need to follow a few quick steps to activate your SIM card. <ol> <li>Log in to your Hologram account, or create one.</li> <li>Click the blue + Activate SIM button in the upper-right-corner of your Dashboard.</li> <p> </p> <li>Select your plan \u2013 in most cases \u201cMaker Flexible\u201d is the way to go, but you can upgrade.</li> <li>Enter your SIM card\u2019s CCID. This number can be found printed on both your nano-SIM card and in the larger digits below the bar code. Then select continue.</li> <li>Next you can decide whether to enable auto-refill or not and continue. Finally, you\u2019ll be greeted with a summary page \u2013 hit \u201cActivate\u201d and you\u2019re ready to go!</li> </ol> <p>For more help activating your Hologram SIM card, check out their Connect Your Device documentation.</p></p>"},{"location":"hardware_hookup/#processor-board","title":"Processor Board","text":"<p>Align the Processor Board's key into its M.2 connector's socket. Insert the board at an angle (~25\u00b0), push down, and tighten the screw. In this case, we had the MicroMod ESP32 Processor Board secured in the M.2 connector socket. Depending on your application, you may have a different Processor Board.</p> <p>Note</p> <p>There are a variety of MicroMod Processor Boards available. However, we recommend using the ESP32, Artemis, and SAMD51 Processor Boards as these were tested to work with the SARA-R5. For the scope of this tutorial, we will be using the ESP32 Processor Board. The caveat when using the ESP32 Processor Board is that you will need to configure the pin that is connected to the voltage regulator's enable pin. This pin is used to upload code and when the ESP32 boots up. After uploading code and/or when the ESP32 has finished booting up, you will need to configure the pin as an input pullup in the <code>setup()</code>.</p>"},{"location":"hardware_hookup/#function-board","title":"Function Board","text":"<p>Align the Function Board's key into its M.2 connector's socket. Insert the board at an angle (~25\u00b0), push down, and tighten one of the screw to hold the board down. Attach the second screw on the other side of the board. Once the board is aligned, tighten both screws fully to secure the board.</p>"},{"location":"hardware_hookup/#attaching-antennas","title":"Attaching Antennas","text":"<p>Once the Function Boards are secure, attach any remaining cables, antennas, or components that your application may need. In this case, we would need to attach the LTE antenna, GNSS antenna, and a u.FL to SMA adapter for each antenna. For each antenna, connect the SMA connectors together and secure the connection using the hex nut until it is finger-tight. Then plug in the u.FL side of the cable into the board's u.FL connector. If you need tips on plugging in the U.FL connector, then check out our U.FL tutorial.</p>"},{"location":"hardware_hookup/#usb-cable","title":"USB Cable","text":"<p>Last but not least, insert a cable to the Main Board's USB port. This is useful for programming the ESP32 Processor Board, power, and serial communication.</p> <p>Note</p> <p>The USB port on the SARA-R5 Function Board is for diagnostics and is currently unavailable. While you can connect to the port for power, there currently is not much support for the diagnostics.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>We've broken out the SARA-R5 module (specifically the SARA-R510M8S-01B) to a MicroMod Function Board. Due to the design of the Function Board, we've rotated the board 180\u00b0 relative to the label in the image shown below. In this section, we will highlight relevant components on the board. For more information about the u-blox SARA-R510M8S module, make sure to check the Resources tab.</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>The Function Board receives power typically from MicroMod Main Board's M.2 socket. Depending on your application, power can be provided via the Main Board's USB or a single cell LiPo Battery. If the Function Board's USB is also connected, a Schottky protection diode (the little rectangular black IC by the USB C connector) is included to prevent conflicting voltages. A resettable fuse is also included next to the USB connector as well. Power for the system is regulated down for the function board from the 3.3V AP7361C voltage regulator (square IC by the bottom left of the board). A dedicated 3.3V AP2112K voltage regulator (5-pin black IC) is also provided when using an active GNSS antenna. Additionally, the board includes an IC for voltage level translation (16 pin black IC on the bottom right of the board) for certain pins on the SARA-R510M8S.</p>"},{"location":"hardware_overview/#usb-type-c-connector","title":"USB Type C Connector","text":"<p>Users can connect the module to a USB port. This can power the module as well. A Schottky protection diode is included to prevent conflicting voltages when the Main Board is connected to a power source. A resettable fuse is also provided. Compared to other u-blox modules, you will this is for the diagnostic interface and not to for flashing new firmware.</p> <p>Note</p> <p>Please consult the SARA R5 Integration Manual for more details on using the diagnostic interface. You cannot (currently) upgrade the SARA via the diagnostic interface. Using the diagnostic interface is beyond the scope of this tutorial.</p>"},{"location":"hardware_overview/#ufl-connectors-for-lte-and-gnss","title":"u.FL Connectors for LTE and GNSS","text":"<p>The MicroMod Main Board was intended to be included in an enclosure. Thus, the function board includes two u.FL connectors for the LTE and GNSS antennas. You will need a u.FL to SMA adapter for each antenna.</p>"},{"location":"hardware_overview/#nano-sim-socket","title":"Nano SIM Socket","text":"<p>To connect to an LTE network, you will need a nano SIM card.</p>"},{"location":"hardware_overview/#on-button","title":"On Button","text":"<p>The \"ON\" button to configure the SARA-R5 power settings. There are three modes: power on, power saving mode (PSM), or power OFF. Press and hold the button down to enter each mode for about 3 seconds. When fully powered, the LED will be bright red. In power saving mode, the LED will dim. When powered off, the LED will turn off.</p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The board includes four status LEDs:</p> <ul> <li>3.3V \u2014 When lit, this indicates 3.3V power is available.</li> <li>Ring \u2014 When lit, this indicates when there is an event.</li> <li>NI \u2014 The LTE Network Indicator LED shows the cellular network status when the SARA-R5's GPIO1 is configured to act as a network status indicator output. The NI LED alternates from full Off (No service), full On (Data Transmission) as well as various pulse lengths to show different network statuses. Refer to section 17.1.3 of the AT Command Manual for the AT commands and description of this LED and the GPIO1/NI pin's behavior for different network states.</li> <li>LTE ON \u2014 The LTE ON LED indicates when the SARA-R5 module is powered on. When the LED is dim, this indicates that the SARA-R5 is in power saving mode. When the LED is off, the modules is powered off.</li> </ul>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>Never worked with solder jumpers and PCB traces before or need a quick refresher? Check out our How to Work with Solder Jumpers and PCB Traces tutorial for detailed instructions and tips.</p> <p>The back of the board includes various jumpers:</p> <ul> <li>USB_SHLD \u2014 By default, this jumper is closed and connects the USB Type C connector's shield pin to GND. Cut this to isolate the USB Type C connector's shield pin.</li> <li>3V3_LED \u2014 By default, this jumper is closed and connects to the output of the 3.3V voltage regulator. This is to indicate when 3.3V power is available for the SARA-R5 module. Cut this jumper to disable the 3.3V power LED and reduce the total current draw of the function board.</li> <li>ANT_REG_EN \u2014 By default, this jumper is closed and connects to the 3.3V AP2112K voltage regulator enable pin to the function board's general purpose I/O pin <code>F7</code>. The voltage regulator is controlled through software to provide power to an active GNSS antenna.</li> <li>LTE_PWR_ON \u2014 By default, this jumper is closed and connects the LTE power on pin to the function board's general purpose I/O pin <code>F5</code>. The LTE_PWR_ON pin is active low. This pin can be controlled through software or manually with the button.</li> <li>LTE_ON_LED \u2014 By default, this jumper is closed and connects to the LTE ON LED. Cut this to disable LED and reduce the total current draw of the function board.</li> <li>LTE_ON \u2014 By default, this jumper is closed and connects to the LTE ON pin to the function board's general purpose I/O pin <code>F1</code>. Cut this to disable LED and reduce the total current draw of the function board.</li> <li>LTE_RST \u2014 By default, this jumper is closed and connects the LTE reset pin to the function board's general purpose I/O pin <code>F2</code>. The LTE_RST pin is active low. This pin is controlled through software and will reset the SARA-R5 module.</li> <li>NI_LED \u2014  By default, this jumper is closed and connects to the LTE network indicator pin to an LED. Cut this to disable LED and reduce the total current draw of the function board.</li> <li>LTE_NI \u2014 By default, this jumper is closed and connects the LTE network indicator pin to the function board's general purpose I/O pin <code>F0</code>. The LTE_NI pin is active low.</li> <li>LTE_RI_LED \u2014 By default, this jumper is closed and connects the UART Ring Indicator to an LED. Cut this jumper to disable the 3.3V power LED and reduce the total current draw of the function board.</li> <li>I2C \u2014  By default, this three way jumper connects the 2.2k\u03a9 pull-up resistors to the I<sup>2</sup>C data lines. Most of the time you can leave these alone unless your project requires you to disconnect the pull-up resistors.</li> <li>WP \u2014  By default, this jumper is open. Adding solder to the jumper pad will disable write protect for the EEPROM.</li> </ul>"},{"location":"hardware_overview/#eeprom","title":"EEPROM","text":"<p>The board includes an I<sup>2</sup>C EEPROM. Unfortunately, this is not available for the user and was meant to hold board specific information.</p>"},{"location":"hardware_overview/#hardware-pinout","title":"Hardware Pinout","text":"<p>The LTE GNSS Function Board breaks out the SARA-R510M8S pins out to the edge of the board when connecting to a M.2 connector.</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board uses the standard MicroMod Function Board size which measures about 37.49mm x 61.00mm (1.48\" x 2.40\").</p>"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun SARA-R5 LTE GNSS Function Board is a robust development tool for u-blox's impressive SARA-R510M8S module. The SARA-R510M8S combines u-blox's UBX-R5 cellular chipset with their M8 GNSS receiver chipset to provide a 5G-Ready wireless IoT device complete with positioning data all on a single chip. As an asset tracker, the LTE GNSS Function Board offers Secure Cloud LTE-M communication for multi-regional use and has an integrated u-blox M8 GNSS receiver for accurate positioning information.</p> <p> <ul> <li> <p> </p> <p> SparkFun LTE GNSS Function Board - SARA-R5    DEV-18431    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>The UBX-R5 chipset supports many different forms of data communication from full TCP/IP sockets and packet switched data, through HTTP Get/Put/Post, FTP (the SARA has a built-in file system), or ping to good old SMS text messaging! The built-in u\u2011blox M8 GNSS receiver provides accurate and reliable positioning with a separate GNSS antenna interface for an external antenna. Both the GNSS antenna and LTE connections are made via a pair of u.FL connectors. A nano SIM card slot is also included as well.</p> <p>Utilizing our handy M.2 MicroMod connector, no soldering is required to connect it to your system. Simply match up the key on your processor and function board's beveled edge connector to their respective key on the M.2 connector, then secure them to the Main Board with screws.</p> <p>This Function Board provides access to the UART (default configuration) with a Processor Board. The USB pins are also broken out to a USB-C connector for diagnostic purposes. Status LEDs are included for 3.3V, Ring Indicator, LTE ON, and LTE Network Indicator. A button is included for LTE Power On.</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun MicroMod - Single Board [DEV-20748]</li> <li>1x SparkFun MicroMod ESP32 Processor [WRL-16781]<ul> <li>There are a variety of MicroMod Processor Boards available. However, we recommend using the ESP32, Artemis, and SAMD51 Processor Boards as these were tested to work with the SARA-R5. For the scope of this tutorial, we will be using the ESP32 Processor Board. The caveat when using the ESP32 Processor Board is that you will need to configure the pin that is connected to the voltage regulator's enable pin. This pin is used to upload code and when the ESP32 boots up. After uploading code and/or when the ESP32 has finished booting up, you will need to configure the pin as an input pullup in the <code>setup()</code>.</li> </ul> </li> <li>1x SparkFun LTE GNSS Function Board - SARA-R5 [DEV-18431]</li> <li>1x USB-C cable<ul> <li>Our USB 2.0 A to C Cable [CAB-15092] will do nicely</li> <li>Our USB 3.1 A to C Cable [CAB-14743] is a good choice too</li> </ul> </li> <li>1x SIM Card<sup>*</sup><ul> <li>Hologram SIM Card [CEL-17117]</li> </ul> </li> <li>1x GNSS Multi-Band Magnetic Mount Antenna - 5m (SMA) [GPS-15192]</li> <li>1x LTE Hinged External Antenna - 698MHz-2.7GHz, SMA Male [CEL-16432]</li> <li>2x Interface Cable SMA to U.FL  [WRL-09145]</li> <li>1x SparkFun Mini Screwdriver [TOL-09146]</li> </ul> <p><sup>*</sup> Note</p> <p><sup>If you use your own SIM card, please check that your chosen service provider offers LTE-M coverage for your area before purchasing.</sup></p> <ul> <li> <p> </p> <p> SparkFun MicroMod - Single Board    DEV-20748 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun MicroMod ESP32 Processor    WRL-16781 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun LTE GNSS Function Board - SARA-R5    DEV-18431 </p> </li> </ul> <ul> <li> <p> </p> <p> USB 2.0 A to C Cable    CAB-15092 </p> </li> </ul> <ul> <li> <p> </p> <p> Hologram SIM Card    CEL-17117 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Multi-Band Magnetic Mount Antenna - 5m (SMA)   GPS-15192 </p> </li> </ul> <ul> <li> <p> </p> <p> LTE Hinged External Antenna - 698MHz-2.7GHz, SMA Male    CEL-16432 </p> </li> </ul> <ul> <li> <p> </p> <p> Interface Cable SMA to U.FL    WRL-09145 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Mini Screwdriver    TOL-09146 </p> </li> </ul> <p>Note</p> <p>The SMA connections on the antennas are standard polarity. Antennas with reverse-polarity connectors are not suitable when connecting to the LTE GNSS Function Board and u.FL to SMA cables.</p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the MicroMod Ecosystem, we recommend reading here for an overview.</p> MicroMod Ecosystem <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> Getting Started with MicroMod </p> </li> <li> <p> </p> <p> MicroMod ESP32 Processor Board Hookup Guide </p> </li> <li> <p> </p> <p> MicroMod Main Board Hookup Guide V2 </p> </li> <li> <p> </p> <p> Installing an Arduino Library </p> </li> <li> <p> </p> <p> Serial Terminal Basics </p> </li> <li> <p> </p> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun MicroMod LED GNSS Function Board - SARA-R5 up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>LTE GNSS Function Board - SARA-R5 Documentation<ul> <li>Schematic</li> <li>Eagle Files</li> <li>Board Dimensions</li> <li>Arduino Library</li> <li>GitHub Hardware Repo</li> <li>SFE Product Showcase</li> </ul> </li> <li>u-blox SARA-R5 LTE-M / NB-IoT Module Documentation<ul> <li>Datasheet</li> <li>AT Command Set</li> <li>System Integration Manual</li> <li>Application Development Guide</li> <li>Internet Applications Development Guide</li> <li>GNSS Integration App Note</li> <li>Firmware Update App Note</li> </ul> </li> <li>MicroMod<ul> <li>Getting Started with MicroMod</li> <li>Designing with MicroMod</li> <li>MicroMod Info Page</li> <li>MicroMod Forums</li> </ul> </li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>The SparkFun SARA-R5 LTE GNSS Function Board is a robust development tool for u-blox's impressive SARA-R510M8S module. The SARA-R510M8S combines u-blox's UBX-R5 cellular chipset with their M8 GNSS receiver chipset to provide a 5G-Ready wireless IoT device complete with positioning data all on a single chip. As an asset tracker, the LTE GNSS Function Board offers Secure Cloud LTE-M communication for multi-regional use and has an integrated u-blox M8 GNSS receiver for accurate positioning information.</p> <p> <ul> <li> <p> </p> <p> SparkFun LTE GNSS Function Board - SARA-R5    DEV-18431    Purchase from SparkFun  </p> </li> </ul> <p></p> <p>The UBX-R5 chipset supports many different forms of data communication from full TCP/IP sockets and packet switched data, through HTTP Get/Put/Post, FTP (the SARA has a built-in file system), or ping to good old SMS text messaging! The built-in u\u2011blox M8 GNSS receiver provides accurate and reliable positioning with a separate GNSS antenna interface for an external antenna. Both the GNSS antenna and LTE connections are made via a pair of u.FL connectors. A nano SIM card slot is also included as well.</p> <p>Utilizing our handy M.2 MicroMod connector, no soldering is required to connect it to your system. Simply match up the key on your processor and function board's beveled edge connector to their respective key on the M.2 connector, then secure them to the Main Board with screws.</p> <p>This Function Board provides access to the UART (default configuration) with a Processor Board. The USB pins are also broken out to a USB-C connector for diagnostic purposes. Status LEDs are included for 3.3V, Ring Indicator, LTE ON, and LTE Network Indicator. A button is included for LTE Power On.</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun MicroMod - Single Board [DEV-20748]</li> <li>1x SparkFun MicroMod ESP32 Processor [WRL-16781]<ul> <li>There are a variety of MicroMod Processor Boards available. However, we recommend using the ESP32, Artemis, and SAMD51 Processor Boards as these were tested to work with the SARA-R5. For the scope of this tutorial, we will be using the ESP32 Processor Board. The caveat when using the ESP32 Processor Board is that you will need to configure the pin that is connected to the voltage regulator's enable pin. This pin is used to upload code and when the ESP32 boots up. After uploading code and/or when the ESP32 has finished booting up, you will need to configure the pin as an input pullup in the <code>setup()</code>.</li> </ul> </li> <li>1x SparkFun LTE GNSS Function Board - SARA-R5 [DEV-18431]</li> <li>1x USB-C cable<ul> <li>Our USB 2.0 A to C Cable [CAB-15092] will do nicely</li> <li>Our USB 3.1 A to C Cable [CAB-14743] is a good choice too</li> </ul> </li> <li>1x SIM Card<sup>*</sup><ul> <li>Hologram SIM Card [CEL-17117]</li> </ul> </li> <li>1x GNSS Multi-Band Magnetic Mount Antenna - 5m (SMA) [GPS-15192]</li> <li>1x LTE Hinged External Antenna - 698MHz-2.7GHz, SMA Male [CEL-16432]</li> <li>2x Interface Cable SMA to U.FL  [WRL-09145]</li> <li>1x SparkFun Mini Screwdriver [TOL-09146]</li> </ul> <p><sup>*</sup> Note</p> <p><sup>If you use your own SIM card, please check that your chosen service provider offers LTE-M coverage for your area before purchasing.</sup></p> <ul> <li> <p> </p> <p> SparkFun MicroMod - Single Board    DEV-20748 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun MicroMod ESP32 Processor    WRL-16781 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun LTE GNSS Function Board - SARA-R5    DEV-18431 </p> </li> </ul> <ul> <li> <p> </p> <p> USB 2.0 A to C Cable    CAB-15092 </p> </li> </ul> <ul> <li> <p> </p> <p> Hologram SIM Card    CEL-17117 </p> </li> </ul> <ul> <li> <p> </p> <p> GNSS Multi-Band Magnetic Mount Antenna - 5m (SMA)   GPS-15192 </p> </li> </ul> <ul> <li> <p> </p> <p> LTE Hinged External Antenna - 698MHz-2.7GHz, SMA Male    CEL-16432 </p> </li> </ul> <ul> <li> <p> </p> <p> Interface Cable SMA to U.FL    WRL-09145 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Mini Screwdriver    TOL-09146 </p> </li> </ul> <p>Note</p> <p>The SMA connections on the antennas are standard polarity. Antennas with reverse-polarity connectors are not suitable when connecting to the LTE GNSS Function Board and u.FL to SMA cables.</p>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the MicroMod Ecosystem, we recommend reading here for an overview.</p> MicroMod Ecosystem <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> Getting Started with MicroMod </p> </li> <li> <p> </p> <p> MicroMod ESP32 Processor Board Hookup Guide </p> </li> <li> <p> </p> <p> MicroMod Main Board Hookup Guide V2 </p> </li> <li> <p> </p> <p> Installing an Arduino Library </p> </li> <li> <p> </p> <p> Serial Terminal Basics </p> </li> <li> <p> </p> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>We've broken out the SARA-R5 module (specifically the SARA-R510M8S-01B) to a MicroMod Function Board. Due to the design of the Function Board, we've rotated the board 180\u00b0 relative to the label in the image shown below. In this section, we will highlight relevant components on the board. For more information about the u-blox SARA-R510M8S module, make sure to check the Resources tab.</p>"},{"location":"single_page/#power","title":"Power","text":"<p>The Function Board receives power typically from MicroMod Main Board's M.2 socket. Depending on your application, power can be provided via the Main Board's USB or a single cell LiPo Battery. If the Function Board's USB is also connected, a Schottky protection diode (the little rectangular black IC by the USB C connector) is included to prevent conflicting voltages. A resettable fuse is also included next to the USB connector as well. Power for the system is regulated down for the function board from the 3.3V AP7361C voltage regulator (square IC by the bottom left of the board). A dedicated 3.3V AP2112K voltage regulator (5-pin black IC) is also provided when using an active GNSS antenna. Additionally, the board includes an IC for voltage level translation (16 pin black IC on the bottom right of the board) for certain pins on the SARA-R510M8S.</p>"},{"location":"single_page/#usb-type-c-connector","title":"USB Type C Connector","text":"<p>Users can connect the module to a USB port. This can power the module as well. A Schottky protection diode is included to prevent conflicting voltages when the Main Board is connected to a power source. A resettable fuse is also provided. Compared to other u-blox modules, you will this is for the diagnostic interface and not to for flashing new firmware.</p> <p>Note</p> <p>Please consult the SARA R5 Integration Manual for more details on using the diagnostic interface. You cannot (currently) upgrade the SARA via the diagnostic interface. Using the diagnostic interface is beyond the scope of this tutorial.</p>"},{"location":"single_page/#ufl-connectors-for-lte-and-gnss","title":"u.FL Connectors for LTE and GNSS","text":"<p>The MicroMod Main Board was intended to be included in an enclosure. Thus, the function board includes two u.FL connectors for the LTE and GNSS antennas. You will need a u.FL to SMA adapter for each antenna.</p>"},{"location":"single_page/#nano-sim-socket","title":"Nano SIM Socket","text":"<p>To connect to an LTE network, you will need a nano SIM card.</p>"},{"location":"single_page/#on-button","title":"On Button","text":"<p>The \"ON\" button to configure the SARA-R5 power settings. There are three modes: power on, power saving mode (PSM), or power OFF. Press and hold the button down to enter each mode for about 3 seconds. When fully powered, the LED will be bright red. In power saving mode, the LED will dim. When powered off, the LED will turn off.</p>"},{"location":"single_page/#leds","title":"LEDs","text":"<p>The board includes four status LEDs:</p> <ul> <li>3.3V \u2014 When lit, this indicates 3.3V power is available.</li> <li>Ring \u2014 When lit, this indicates when there is an event.</li> <li>NI \u2014 The LTE Network Indicator LED shows the cellular network status when the SARA-R5's GPIO1 is configured to act as a network status indicator output. The NI LED alternates from full Off (No service), full On (Data Transmission) as well as various pulse lengths to show different network statuses. Refer to section 17.1.3 of the AT Command Manual for the AT commands and description of this LED and the GPIO1/NI pin's behavior for different network states.</li> <li>LTE ON \u2014 The LTE ON LED indicates when the SARA-R5 module is powered on. When the LED is dim, this indicates that the SARA-R5 is in power saving mode. When the LED is off, the modules is powered off.</li> </ul>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>Never worked with solder jumpers and PCB traces before or need a quick refresher? Check out our How to Work with Solder Jumpers and PCB Traces tutorial for detailed instructions and tips.</p> <p>The back of the board includes various jumpers:</p> <ul> <li>USB_SHLD \u2014 By default, this jumper is closed and connects the USB Type C connector's shield pin to GND. Cut this to isolate the USB Type C connector's shield pin.</li> <li>3V3_LED \u2014 By default, this jumper is closed and connects to the output of the 3.3V voltage regulator. This is to indicate when 3.3V power is available for the SARA-R5 module. Cut this jumper to disable the 3.3V power LED and reduce the total current draw of the function board.</li> <li>ANT_REG_EN \u2014 By default, this jumper is closed and connects to the 3.3V AP2112K voltage regulator enable pin to the function board's general purpose I/O pin <code>F7</code>. The voltage regulator is controlled through software to provide power to an active GNSS antenna.</li> <li>LTE_PWR_ON \u2014 By default, this jumper is closed and connects the LTE power on pin to the function board's general purpose I/O pin <code>F5</code>. The LTE_PWR_ON pin is active low. This pin can be controlled through software or manually with the button.</li> <li>LTE_ON_LED \u2014 By default, this jumper is closed and connects to the LTE ON LED. Cut this to disable LED and reduce the total current draw of the function board.</li> <li>LTE_ON \u2014 By default, this jumper is closed and connects to the LTE ON pin to the function board's general purpose I/O pin <code>F1</code>. Cut this to disable LED and reduce the total current draw of the function board.</li> <li>LTE_RST \u2014 By default, this jumper is closed and connects the LTE reset pin to the function board's general purpose I/O pin <code>F2</code>. The LTE_RST pin is active low. This pin is controlled through software and will reset the SARA-R5 module.</li> <li>NI_LED \u2014  By default, this jumper is closed and connects to the LTE network indicator pin to an LED. Cut this to disable LED and reduce the total current draw of the function board.</li> <li>LTE_NI \u2014 By default, this jumper is closed and connects the LTE network indicator pin to the function board's general purpose I/O pin <code>F0</code>. The LTE_NI pin is active low.</li> <li>LTE_RI_LED \u2014 By default, this jumper is closed and connects the UART Ring Indicator to an LED. Cut this jumper to disable the 3.3V power LED and reduce the total current draw of the function board.</li> <li>I2C \u2014  By default, this three way jumper connects the 2.2k\u03a9 pull-up resistors to the I<sup>2</sup>C data lines. Most of the time you can leave these alone unless your project requires you to disconnect the pull-up resistors.</li> <li>WP \u2014  By default, this jumper is open. Adding solder to the jumper pad will disable write protect for the EEPROM.</li> </ul>"},{"location":"single_page/#eeprom","title":"EEPROM","text":"<p>The board includes an I<sup>2</sup>C EEPROM. Unfortunately, this is not available for the user and was meant to hold board specific information.</p>"},{"location":"single_page/#hardware-pinout","title":"Hardware Pinout","text":"<p>The LTE GNSS Function Board breaks out the SARA-R510M8S pins out to the edge of the board when connecting to a M.2 connector.</p>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board uses the standard MicroMod Function Board size which measures about 37.49mm x 61.00mm (1.48\" x 2.40\").</p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"single_page/#software-setup","title":"Software Setup","text":""},{"location":"single_page/#at-command-set","title":"AT Command Set","text":"<p>For users who want to go right into directly manipulating the SARA-R5 using the AT Command Set, review the AT Command Manual from u-blox:</p> SARA-R5 AT Commands Manual <p>Read on to the next sections if you prefer to use the MicroMod LTE GNSS Function Board with the SparkFun u-blox SARA-R5 Arduino Library.</p>"},{"location":"single_page/#installing-the-arduino-library","title":"Installing the Arduino Library","text":"<p>Note</p> <p>The SparkFun u-blox SARA-R5 Arduino Library provides a quick way to interact with the interfaces on the MicroMod LTE GNSS Function Board. Install the library through the Arduino Library Manager tool by searching for \"SparkFun u-blox SARA-R5\". Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun SARA-R5 Arduino Library (ZIP) <p>The library primarily works by associating a selection of AT Commands from the Command Set Manual with standard Arduino functions to run automatically in a sketch. View the full list of AT Commands included in this library (along with all other available functions) in the header file. The list of included AT Commands starts on line 93.</p> <p>Note</p> <p>When using the MicroMod ESP32 Processor Board with the  SparkFun_u-blox_SARA-R5_Arduino_Library make sure to include the following line of code in the <code>setup()</code> function to enable the voltage regulator:</p> <p><pre><code>\u00a0\u00a0\u00a0\u00a0pinMode(PWM1, INPUT_PULLUP); // EN on F0 when using the ESP32 Processor Board</code></pre></p>"},{"location":"single_page/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and an library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"single_page/#board-definitions","title":"Board Definitions","text":"<p>For the scope of this tutorial, we will be using the MicroMod ESP32 Processor Board. If you have not installed a board definition before, please review the following tutorial as well.</p> <ul> <li>Installing Board Definitions in the Arduino IDE</li> </ul>"},{"location":"single_page/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>The MicroMod ESP32 Processor Board also uses the CP2104 USB-to-Serial converter (other compatible Processor Boards may require a different driver). Users will need to install the SiLabs CP2104 Driver, which can be found here: USB to UART Bridge VCP Driver. Make sure to manually install the driver for the CP2104 with the following instructions. The driver that Windows auto-installs will not work with the auto-reset circuit on the board and cause serial uploads to fail.</p> <ul> <li>Windows VCP Driver (ZIP)</li> <li>MAC OSX VCP Driver (ZIP)</li> </ul> <p>If applicable, make sure you are using the proper driver files for your CPU architecture. This is usually indicated by a folder or file name with \"x86\" for 32-bit processors or \"x64\" for 64-bit processors.</p>"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":"<p>The SparkFun u-blox SARA-R5 Arduino Library includes several examples to cover how to configure and use different features of the SARA-R5 module.</p> <p>Make sure to go through the following examples to get the SARA-R5 registered and configured properly on your mobile network:</p> <ul> <li>Example 3 - Network Info</li> <li>Example 4 - Register Operator</li> <li>Example 7 - Configure Packet Switched Data</li> </ul>"},{"location":"single_page/#example-1-gnss-gprmc","title":"Example 1 - GNSS GPRMC","text":"<p>The first example enables the GNSS receiver and reads the GPRMC message for position, speed and time data. Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example1_GNSS_GPRMC.</p> <p>Select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200. The code waits for a keyboard input from the user before progressing and running the setup and loop. After user input, the code prints out GPS data every second when there is a GPS lock.</p> <p>Note</p> <p>Heads up! Make sure your GNSS antenna has a clear view of the open sky. Placing the antenna outdoors away from large objects (buildings, large trees, etc.) is best but if necessary you can usually place the antenna in a window that has a view of the sky to get a lock.</p>"},{"location":"single_page/#code-to-note","title":"Code to Note","text":"<p>This function organizes the GPS data to print out neatly whenever the data returns as valid:</p> <pre><code>void printGPS(void)\n{\n  Serial.println();\n  Serial.println(\"UTC: \" + String(gps.utc));\n  Serial.print(\"Time: \");\n  if (clk.time.hour &lt; 10) Serial.print('0'); // Print leading 0\n  Serial.print(String(clk.time.hour) + \":\");\n  if (clk.time.minute &lt; 10) Serial.print('0'); // Print leading 0\n  Serial.print(String(clk.time.minute) + \":\");\n  if (clk.time.second &lt; 10) Serial.print('0'); // Print leading 0\n  Serial.print(String(clk.time.second) + \".\");\n  if (clk.time.ms &lt; 10) Serial.print('0'); // Print leading 0\n  Serial.println(String(clk.time.ms));\n  Serial.println(\"Latitude: \" + String(gps.lat, 7));\n  Serial.println(\"Longitude: \" + String(gps.lon, 7));\n  Serial.println(\"Speed: \" + String(spd.speed, 4) + \" @ \" + String(spd.cog, 4));\n  Serial.println(\"Date (MM/DD/YY): \" + String(clk.date.month) + \"/\" +\n    String(clk.date.day) + \"/\" + String(clk.date.year));\n  Serial.println(\"Magnetic variation: \" + String(spd.magVar));\n  Serial.println(\"Status: \" + String(gps.status));\n  Serial.println(\"Mode: \" + String(gps.mode));\n  Serial.println();\n}\n</code></pre>"},{"location":"single_page/#example-2-identification","title":"Example 2 - Identification","text":"<p>The second example prompts the LTE module to read the SARA-R5's identification information:</p> <ul> <li>Manufacturer ID</li> <li>Model</li> <li>Firmware Version</li> <li>Serial Number</li> <li>IMEI ID</li> <li>IMSI ID</li> <li>SIM CCID</li> <li>Subscriber Number (from the SIM)</li> <li>Capabilities</li> <li>SIM state</li> </ul> <p>This example primarily functions as a check to make sure the SARA-R5 is working properly and the SIM card is detected then polls the SIM status in the main loop. Upload the code and open a terminal window with the baud set to 115200. The code initializes the SARA-R5 and after a user input, initializes the SARA-R5 and prints out the ID information and SIM state.</p> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example2_Identification.</p> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Again, the code waits for a keyboard input from the user before progressing and running the setup and loop.</p> <p>Make sure to wait for the blue NI LED to light up first before sending a character through the terminal window. Once there is a network in range, send a character to run the example. You will see the SARA-R5's identification information printed out.</p>"},{"location":"single_page/#example-3-network-info","title":"Example 3 - Network Info","text":"<p>This example verifies the SARA-R5 is receiving an LTE signal on a selected network and prints out the network information and IDs. The code creates the SARA-R5 object and assigns a network operator value. Depending on the network for your SIM card uses, adjust this line:</p> <pre><code>const mobile_network_operator_t MOBILE_NETWORK_OPERATOR = MNO_GLOBAL;\n</code></pre> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example3_NetworkInfo.</p> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Wait for the blue NI LED to light up and then send a keyboard input.</p> <p>After initializing everything needed, the code attempts to set the Network Profile to the Mobile Network Operator entered. If successful, the code prints out the RSSI (Received Signal Strength), Network Registration Status and Context IDs, Access Point Names and IP Addresses.</p> <p>Depending on the output in the Serial Monitor, you may need to scroll down to view the Context ID, APN, and IP Address.</p>"},{"location":"single_page/#example-4-register-operator","title":"Example 4 - Register Operator","text":"<p>Example 4 checks to see if the SARA-R5 is connected to a network and lets you register on a different network if available and if the SIM supports this. This example can also be used to list all the LTE operators the SARA-R5 can detect.</p> <p>Note</p> <p>You can only connect to networks supported by your SIM card. Refer to your SIM card manufacturer's documentation for supported networks.</p> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example4_RegisterOperator.</p> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Wait for the blue NI LED to light up and then send a keyboard input.</p>"},{"location":"single_page/#example-7-configure-packed-switched-data","title":"Example 7 - Configure Packed Switched Data","text":"<p>Example 7 configures the \"Context Identifier\" for the mobile data connection. Make sure to go through this example to properly set up your SARA-R5 Context ID.</p> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example7_ConfigurePacketSwitchedData.</p> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Wait for the blue NI LED to light up and then send a keyboard input. Then follow the prompts to select the appropriate Context ID. You may see a few Context IDs so make sure to select one that looks correct (i.e. not a blank IP):</p> <p>The code provides a warning that \u201cdeactivate profile failed\u201d. We see this because the SARA needs to disconnect from a profile before it can connect to a new one, and in this case this failed because there was no profile active. Don't worry about this warning, it is just there for information. The example shows that our connection was successful by displaying the Internet Protocol (IP) address the SARA has been allocated by the service operator.</p>"},{"location":"single_page/#example-5-receive-sms","title":"Example 5 - Receive SMS","text":"<p>The fifth example demonstrates how to read and print any SMS text messages the SARA-R5 receives. The code checks whether the module is connected to an operator and will freeze if unsuccessful. If the code freezes here, wait and retry as it may be a connection issue with your network. Otherwise, return to Examples 3 and 4 to set up the Network Operator.</p> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example5_ReceiveSMS.</p> <p>The main loop accesses the message storage memory used for reading and deleting messages for data and prints the used and total number of memory locations in the message storage.</p> <p>The code waits for any new messages to arrive and prints the Message Index (location), Status, Originator, Date and Time and then the message contents.</p> <p>New messages are automatically marked as read once the code prints them. To force the code to print all the messages stored in the message memory, comment out this line:</p> <pre><code>if (unread == \"REC UNREAD\")\n</code></pre> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Wait for the blue NI LED to light up and then send a keyboard input.</p> <p>Assuming that you registered and activated your Hologram SIM card, log into your Hologram account. Head to the Devices and select the SIM card. Then select the Messaging tab and write message. Hit Send SMS message button.</p> <p>If all goes well, you will notice that the message was sent successfully!</p> <p>Head back to you Arduino Serial Monitor to view the message. You should see the message that was originally written in the Serial Monitor. Sweet!</p> <p>Before moving onto the next example, make sure to keep track of the \"Originator\". This is the number that is associated with the SIM card and your Hologram account.</p>"},{"location":"single_page/#example-6-send-sms","title":"Example 6 - Send SMS","text":"<p>Note</p> <p>Depending on your network, you may have issues sending a SMS message to a smartphone. Even if you have the correct phone number entered and you receive a response that the message was sent successfully to your network, the service carrier may block the message from being sent to your smartphone. For more information, check out the article about Troubleshooting Undelivered SMS Messages Sent To or From a Hologram Device.</p> <p>The sixth example sends SMS messages to another phone or LTE module from the SparkFun LTE GNSS Function Board - SARA-R5. The code prompts the user for the destination number and message contents.</p> <p>Open the example by navigating to File &gt; Examples &gt; SparkFun u-blox SARA-R5 Arduino Library &gt; SARA-R5_Example6_SendSMS.</p> <p>If you have not already, select your board in the Tools menu (in our case SparkFun ESP32 MicroMod) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor with the baud rate set to 115200. Wait for the blue NI LED to light up and then send a keyboard input. Enter the message that you want to send and the destination number.</p> <p>Assuming that you are using a Hologram SIM card, head back to your Hologram account. Expand the window where it says \"All activity\". You should see the original message that was sent from the SARA-R5!</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":"<p>This section outlines a few troubleshooting tips and common snags when using the SparkFun LTE GNSS FUnction Board - SARA-R5.</p>"},{"location":"single_page/#lte-network-availability","title":"LTE Network Availability","text":"<p>The SARA-R5 supports LTE-M and NB-IoT data communication for multi-regional use. Please check the LTE signal availability for your area before purchasing a SARA-R5 product and selecting an LTE service provider / operator.</p>"},{"location":"single_page/#data-connectivity","title":"Data Connectivity","text":"<p>When working through the data connectivity examples, it is important that you run examples 13, 14 and 17 in order, before moving on to example 18 or 19. Each example builds on the last and together they configure the SARA\u2019s data connection correctly.</p>"},{"location":"single_page/#arduino-debug-messages","title":"Arduino Debug Messages","text":"<p>If you run into any trouble using one of the Arduino examples, uncomment this line:</p> <pre><code>assetTracker.enableDebugging(SERIAL_PORT);\n</code></pre> <p>This enables serial debugging to print out the full debug report from AT commands sent via functions in the library. Read through the data and search for matching error codes in Appendix A of the AT Command Reference manual to decipher the code.</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun MicroMod LED GNSS Function Board - SARA-R5 up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>LTE GNSS Function Board - SARA-R5 Documentation<ul> <li>Schematic</li> <li>Eagle Files</li> <li>Board Dimensions</li> <li>Arduino Library</li> <li>GitHub Hardware Repo</li> <li>SFE Product Showcase</li> </ul> </li> <li>u-blox SARA-R5 LTE-M / NB-IoT Module Documentation<ul> <li>Datasheet</li> <li>AT Command Set</li> <li>System Integration Manual</li> <li>Application Development Guide</li> <li>Internet Applications Development Guide</li> <li>GNSS Integration App Note</li> <li>Firmware Update App Note</li> </ul> </li> <li>MicroMod<ul> <li>Getting Started with MicroMod</li> <li>Designing with MicroMod</li> <li>MicroMod Info Page</li> <li>MicroMod Forums</li> </ul> </li> </ul>"},{"location":"software_setup/","title":"Software Setup","text":""},{"location":"software_setup/#at-command-set","title":"AT Command Set","text":"<p>For users who want to go right into directly manipulating the SARA-R5 using the AT Command Set, review the AT Command Manual from u-blox:</p> SARA-R5 AT Commands Manual <p>Read on to the next sections if you prefer to use the MicroMod LTE GNSS Function Board with the SparkFun u-blox SARA-R5 Arduino Library.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This section outlines a few troubleshooting tips and common snags when using the SparkFun LTE GNSS FUnction Board - SARA-R5.</p>"},{"location":"troubleshooting/#lte-network-availability","title":"LTE Network Availability","text":"<p>The SARA-R5 supports LTE-M and NB-IoT data communication for multi-regional use. Please check the LTE signal availability for your area before purchasing a SARA-R5 product and selecting an LTE service provider / operator.</p>"},{"location":"troubleshooting/#data-connectivity","title":"Data Connectivity","text":"<p>When working through the data connectivity examples, it is important that you run examples 13, 14 and 17 in order, before moving on to example 18 or 19. Each example builds on the last and together they configure the SARA\u2019s data connection correctly.</p>"},{"location":"troubleshooting/#arduino-debug-messages","title":"Arduino Debug Messages","text":"<p>If you run into any trouble using one of the Arduino examples, uncomment this line:</p> <pre><code>assetTracker.enableDebugging(SERIAL_PORT);\n</code></pre> <p>This enables serial debugging to print out the full debug report from AT commands sent via functions in the library. Read through the data and search for matching error codes in Appendix A of the AT Command Reference manual to decipher the code.</p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun MicroMod LTE GNSS Function Board repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun MicroMod LTE GNSS Function Board repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums: MicroMod are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun MicroMod LTE GNSS Function Board repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun MicroMod LTE GNSS Function Board repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}